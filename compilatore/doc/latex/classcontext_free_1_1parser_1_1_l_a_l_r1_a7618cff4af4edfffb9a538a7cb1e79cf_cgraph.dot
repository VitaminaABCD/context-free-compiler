digraph G
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node1 [label="contextFree.parser.LALR1.init",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [color="midnightblue",fontsize="10",style="solid"];
  Node2 [label="contextFree.parser.LR0.Item",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_r0.html#aa96d752420b690ccbbc9fad67691f36a",tooltip="given a grammar G we calculate the associated grammar augmented by adding the production S &#39;:: =..."];
  Node2 -> Node3 [color="midnightblue",fontsize="10",style="solid"];
  Node3 [label="contextFree.grammar.IGrammar.getS",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacecontext_free_1_1grammar_1_1_i_grammar.html#aceb36e584d26bd39a0f5186742cc9b5b",tooltip="Get the axioms."];
  Node2 -> Node4 [color="midnightblue",fontsize="10",style="solid"];
  Node4 [label="contextFree.parser.LR0.chiusura",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_r0.html#aa0e8369b6e2db7489437ad8a6f217d22",tooltip="*I passed a list of production that form the kernel of a state, return closing it"];
  Node4 -> Node5 [color="midnightblue",fontsize="10",style="solid"];
  Node5 [label="contextFree.parser.LR0.uguale",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_r0.html#a8de929e041a5a1a273e6ddd05dc7e0ca",tooltip="checks if a state is present in an automaton"];
  Node5 -> Node6 [color="midnightblue",fontsize="10",style="solid"];
  Node6 [label="contextFree.grammar.Production.getLeft",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1grammar_1_1_production.html#a6b42819c4b8af1aa759edf3ad5978f67"];
  Node4 -> Node7 [color="midnightblue",fontsize="10",style="solid"];
  Node7 [label="contextFree.grammar.IGrammar.getP",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacecontext_free_1_1grammar_1_1_i_grammar.html#a629ab4dc36a869b93fa239a3fee760f9",tooltip="Get production list."];
  Node4 -> Node6 [color="midnightblue",fontsize="10",style="solid"];
  Node4 -> Node8 [color="midnightblue",fontsize="10",style="solid"];
  Node8 [label="contextFree.parser.LR0.prodPresente",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_r0.html#a242530010547a830ad1b9c35a724a7e6",tooltip="checks if a production is already in a list of productions."];
  Node8 -> Node5 [color="midnightblue",fontsize="10",style="solid"];
  Node8 -> Node6 [color="midnightblue",fontsize="10",style="solid"];
  Node2 -> Node9 [color="midnightblue",fontsize="10",style="solid"];
  Node9 [label="contextFree.grammar.IGrammar.getV",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacecontext_free_1_1grammar_1_1_i_grammar.html#a4b1bc2134e63051dc37e693294aaeec6",tooltip="Get non-terminal symbols list."];
  Node2 -> Node10 [color="midnightblue",fontsize="10",style="solid"];
  Node10 [label="contextFree.parser.LR0.GoTo",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_r0.html#aea1ecb06a1880a8bc5eeb4efcca0ecea",tooltip="Passed a state and the symbol that follows the point, returns the kernel of the new state with the re..."];
  Node10 -> Node4 [color="midnightblue",fontsize="10",style="solid"];
  Node2 -> Node5 [color="midnightblue",fontsize="10",style="solid"];
  Node2 -> Node11 [color="midnightblue",fontsize="10",style="solid"];
  Node11 [label="contextFree.grammar.IGrammar.getT",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacecontext_free_1_1grammar_1_1_i_grammar.html#a996f5e0bed5a6ac469b764f56d420fb1",tooltip="Get terminal symbols list."];
  Node1 -> Node12 [color="midnightblue",fontsize="10",style="solid"];
  Node12 [label="contextFree.parser.Automa.newItemsFromKernels",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_automa.html#ad82cfb3bb6b22d084ef18a95350828b3",tooltip="Get kernels element for each states into automa."];
  Node1 -> Node13 [color="midnightblue",fontsize="10",style="solid"];
  Node13 [label="contextFree.parser.LALR1.calculateSymbol",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_a_l_r1.html#aeec32b5c83e031225114f46ac377f804",tooltip="Calculate one step of lookahead symbol from an automaton with the algorithm of spontaneous generation..."];
  Node13 -> Node14 [color="midnightblue",fontsize="10",style="solid"];
  Node14 [label="contextFree.parser.LALR1.chiusuraLR1",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_a_l_r1.html#ac711dbbc2be25d15c1a8aade7579e94e",tooltip="Passed a list of production I that form the kernel of a state, return closing it, and the lookahead s..."];
  Node14 -> Node5 [color="midnightblue",fontsize="10",style="solid"];
  Node14 -> Node7 [color="midnightblue",fontsize="10",style="solid"];
  Node14 -> Node6 [color="midnightblue",fontsize="10",style="solid"];
  Node14 -> Node11 [color="midnightblue",fontsize="10",style="solid"];
  Node14 -> Node15 [color="midnightblue",fontsize="10",style="solid"];
  Node15 [label="contextFree.grammar.IGrammar.getFirst",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$interfacecontext_free_1_1grammar_1_1_i_grammar.html#a256e9280e008a7c709ccb80725ccc0f2",tooltip="Get the list of first for the grammar."];
  Node14 -> Node16 [color="midnightblue",fontsize="10",style="solid"];
  Node16 [label="contextFree.parser.IndexedProduction.getLookahead",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_indexed_production.html#a94e0e318a96518ee50607e682e7f0382"];
  Node14 -> Node8 [color="midnightblue",fontsize="10",style="solid"];
  Node1 -> Node17 [color="midnightblue",fontsize="10",style="solid"];
  Node17 [label="contextFree.parser.Automa.removeDollarLookahed",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_automa.html#ad94ecd3a9f8850220f86b6c54b751f78",tooltip="remove dollar simbol lookahed"];
  Node1 -> Node14 [color="midnightblue",fontsize="10",style="solid"];
  Node1 -> Node18 [color="midnightblue",fontsize="10",style="solid"];
  Node18 [label="contextFree.parser.LALR1.tableCostruction",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_a_l_r1.html#a79576626b3b59b832faecc986b293b36",tooltip="builds the Action table GoTo from an automa LALR1 and tells us if it is or not type of LALR1..."];
  Node18 -> Node9 [color="midnightblue",fontsize="10",style="solid"];
  Node18 -> Node11 [color="midnightblue",fontsize="10",style="solid"];
  Node18 -> Node19 [color="midnightblue",fontsize="10",style="solid"];
  Node19 [label="contextFree.parser.LALR1.reduce",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_a_l_r1.html#a2281981b3043c0150c1b3d3967572b1f",tooltip="if the point is in the last position he wrote the reduces in the action table."];
  Node19 -> Node20 [color="midnightblue",fontsize="10",style="solid"];
  Node20 [label="contextFree.parser.State.getKernels",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_state.html#a1afb2f9faa5ec548897e44cc863389ba",tooltip="return one list&lt;IndexedProduction&gt; with the kernel of a state"];
  Node20 -> Node16 [color="midnightblue",fontsize="10",style="solid"];
  Node19 -> Node21 [color="midnightblue",fontsize="10",style="solid"];
  Node21 [label="contextFree.parser.LALR1.actionWrite",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classcontext_free_1_1parser_1_1_l_a_l_r1.html#a7379103379c94e377daca0022b28771e",tooltip="Writes the action Reduce or Scift in the Action table."];
  Node19 -> Node11 [color="midnightblue",fontsize="10",style="solid"];
  Node18 -> Node21 [color="midnightblue",fontsize="10",style="solid"];
}
